import 'dart:core';

import 'package:flutter/material.dart';

import '../model/user.dart';
import 'user_service.dart';

class AuthenticationService {

  ///create variable instances for use
  final FirebaseAuth _auth = FirebaseAuth.instance;
  User _user = new User();
  UserService _userService = new UserService();
  UserCredential _credential;


  ///hard coded user and passwords for auth services testing
  User _testUser = new User(id: 'AutoGeneratedByFirebase', email: 'foobar@gmail.com', displayName: 'Foo Bar');
  String _pwd = '123Password!@';
  String _pwdSuccessVerify =  '123Password!@';
  String _pwdFailVerify = '123asdf!@#ASDF';

  ///Constructor for AuthenticationService
  AuthenticationService(this._auth);
  
  ///manage auth using stream to provide subsequent events when auth state changes
  Stream<User> get authStateChanges => _auth.authStateChanges();

  ///Sign up with email/password
  Future<String> signUp(String email, String password, String passwordVerify) async {
    if(password == passwordVerify) {
      try {
        _credential = await _auth.createUserWithEmailAndPassword(
            email: email password: password);
        _user.copyWith(id: _credential.user.uid, email: email);
        await _userService.addToDatabase(_user);
        return "Signed Up";
      } on FirebaseAuthException catch (e) {
        if (e.code == 'weak-password') {
          return 'The password provided is too weak.';
        } else if (e.code == 'email-already-in-use') {
          return 'The account already exists for that email.';
        } else {
          return 'Something Went Wrong.';
        }
      } catch (e) {
        print(e);
      }
    }
    return 'Passwords do not Match';
  }

  ///Sign in user with e-mail
  Future<String> signIn(String email, String password) async {
    try {
      _credential = await _auth.signInWithEmailAndPassword(
          email: email, password: password);
      return 'Signed In';
    } on FirebaseAuthException catch (e) {
      if (e.code == 'weak-password') {
        return 'The password provided is too weak.';
      } else if (e.code == 'email-already-in-use') {
        return 'The account already exists for that email.';
      } else {
        return 'Something Went Wrong.';
      }
    } catch (e) {
      print(e);
    }
    return null;
  }

  ///sign out
  Future<void> signOut() async {
    await _auth.signOut();
  }

  ///password verification
  bool verifyPassword(String password, String passwordVerify){
    if(password == passwordVerify){
      return true;
    } else{
      return false;
    }
  }

  ///correct way to sign up
  void signUpSuccess() async {
    signUp(_testUser.email, _pwd, _pwdSuccessVerify);
  }

  ///correct sign in
  void signInSuccess() async{
    signIn(_testUser.email, _pwd);

  }

  ///incorrect sign up
  void signUpFail() async{
    signUp(_testUser.email, _pwd, _pwdFailVerify);
  }

  ///incorrect sign in
  void signInFail() async{
    signIn(_testUser.email, _pwdFailVerify);
  }

}