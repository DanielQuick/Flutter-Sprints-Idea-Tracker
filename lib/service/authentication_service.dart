import 'dart:core';

import '../model/user.dart';
//import 'user_service.dart';

class AuthenticationService {
  /*
  ///create variable instances for use
  final FirebaseAuth _auth = FirebaseAuth.instance;
  User _user = new User();
  UserService _userService = new UserService();
  UserCredential _credential;
  */

  ///hard coded user and passwords for auth services testing
  User _testUser = new User(id: 'AutoGeneratedByFirebase', email: 'foobar@gmail.com', displayName: 'Foo Bar');
  String _pwd = '123Password!@';
  String _pwdSuccessVerify =  '123Password!@';
  String _pwdFailVerify = '123asdf!@#ASDF';
  
  /*
  ///Constructor for AuthenticationService
  AuthenticationService(this._auth);
  
  ///manage auth using stream to provide subsequent events when auth state changes
  Stream<User> get authStateChanges => _auth.authStateChanges();
  ///Sign up with email/password
  Future<String> signUp(List signUp) async {
    if(signUp[1] == signUp[2]) {
      try {
        _credential = await _auth.createUserWithEmailAndPassword(
            email: signUp[0], password: signUp[2]);
        _user.copyWith(id: _credential.user.uid, email: signUp[0]);
        await _userService.addToDatabase(_user);
        return "Signed Up";
      } on FirebaseAuthException catch (e) {
        if (e.code == 'weak-password') {
          return 'The password provided is too weak.';
        } else if (e.code == 'email-already-in-use') {
          return 'The account already exists for that email.';
        } else {
          return 'Something Went Wrong.';
        }
      } catch (e) {
        print(e);
      }
    }
    return 'Passwords do not Match';
  }
  ///Sign in user with e-mail
  Future<String> signUp(List signIn) async {
    try {
      _credential = await _auth.signInWithEmailAndPassword(
          email: signIn[0], password: signIn[1]);
      return 'Signed Up';
    } on FirebaseAuthException catch (e) {
      if (e.code == 'weak-password') {
        return 'The password provided is too weak.';
      } else if (e.code == 'email-already-in-use') {
        return 'The account already exists for that email.';
      } else {
        return 'Something Went Wrong.';
      }
    } catch (e) {
      print(e);
    }
  }

  Future<void> signOut() async {
    await _auth.signOut();
  }
  */

  ///password verification
  bool verifyPassword(String password, String passwordVerify){
    if(password == passwordVerify){
      return true;
    } else{
      return false;
    }
  }

  ///correct way to sign up
  signUpSuccess() async {
    List<String> _signUpSuccess = [_testUser.email, _pwd, _pwdSuccessVerify];
    return _signUpSuccess;
  }

  ///correct sign in
  signInSuccess() {
    List<String> _signInSuccess = [_testUser.email, _pwd];
    return _signInSuccess;
  }

  ///incorrect sign up
  signUpFail() async{
    List<String> _signUpFail = [_testUser.email, _pwd, _pwdFailVerify];
    return _signUpFail;
  }

  ///incorrect sign in
  signInFail() async{
    List<String> _signInFail = [_testUser.email, _pwdFailVerify];
    return _signInFail;
  }

}